#include<bits/stdc++.h>
using namespace std;

int matrix_chain_multiplication(int dimensions[],int n,int s[][100])
{
    int m[n][n];
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++)
        {
            m[i][j]=0;
        }
    }

    for(int d=2; d<n; d++)
    {
        for(int i=1; i<n-d+1; i++)
        {
            int j=i+d-1;
            m[i][j]=INT_MAX;
            for(int k=i; k<j; k++)
            {
                int cost=m[i][k]+m[k+1][j]+(dimensions[i-1]*dimensions[k]*dimensions[j]);
                if(cost<m[i][j])
                {
                    m[i][j]=cost;
                    s[i][j]=k;
                }
            }
        }
    }

    return m[1][n-1];
}

void print_optimal_parenthesization(int s[][100],int i,int j)
{
    if(i==j)
    {
        cout<<"A"<<i;
    }
    else
    {
        cout<<"(";
        print_optimal_parenthesization(s,i,s[i][j]);
        print_optimal_parenthesization(s,s[i][j]+1,j);
        cout<<")";
    }
}

int main()
{
    int n;
    cout<<"Enter the number of matrices :"<<endl;
    cin>>n;

    int dimensions[n+1];
    cout<<"Enter the dimensions : "<<endl;
    for(int i=0; i<=n; i++)
    {
        cin>>dimensions[i];
    }

    int s[100][100]= {0};

    int minMultiplications=matrix_chain_multiplication(dimensions,n+1,s);

    cout<<"Minimum number of multiplications : "<<minMultiplications<<endl;
    cout<<"Optimal Parenthesization : ";
    print_optimal_parenthesization(s,1,n);

    return 0;
}
