#include <bits/stdc++.h>
using namespace std;

/*
vertex=6
edge=9

0 1 7
1 2 6
0 3 8
1 3 3
2 3 4
3 4 3
2 4 2
2 5 5
4 5 2
*/
class Edge
{
public:
    int source;
    int destination;
    int weight;
};

bool compare(Edge e1, Edge e2)
{
    return e1.weight < e2.weight;
}

int findParent(int v, int *parent)
{
    if (parent[v] == v)
    {
        return v;
    }
    return findParent(parent[v], parent);
}

void kruskalMST(Edge *input, int v, int e)
{
    // sort the input array based on weights
    sort(input, input + e, compare);

    Edge *output = new Edge[v - 1];

    int *parent = new int[v];

    for (int i = 0; i < v; i++)
    {
        parent[i] = i;
    }

    int count = 0;
    int i = 0;
    while (count != v - 1)
    {
        Edge currentEdge = input[i];

        // Checking cycle
        int sourceParent = findParent(currentEdge.source, parent);
        int destParent = findParent(currentEdge.destination, parent);

        if (sourceParent != destParent)
        {
            output[count] = currentEdge;
            count++;
            parent[sourceParent] = destParent;
        }
        i++;
    }

    cout << "The Minimum Spanning Tree : " << endl;
    for (int i = 0; i < v - 1; i++)
    {
        if (output[i].source < output[i].destination)
        {
            cout << "U->V : " << output[i].source << " -> " << output[i].destination << " Weight : " << output[i].weight << endl;
        }
        else
        {
            cout << "U->V : " << output[i].destination << " -> " << output[i].source<< " Weight : " << output[i].weight << endl;
        }
    }
}

int main()
{
    int v, e;
    cout << "Enter the number of vertices :" << endl;
    cin >> v;
    cout << "Enter the number of edges :" << endl;
    cin >> e;

    Edge *input = new Edge[e];

    cout<<"Enter the edges in (u v w) format :"<<endl;

    for (int i = 0; i < e; i++)
    {
        int s, d, w;
        cin >> s >> d >> w;
        input[i].source = s;
        input[i].destination = d;
        input[i].weight = w;
    }

    kruskalMST(input, v, e);
}
