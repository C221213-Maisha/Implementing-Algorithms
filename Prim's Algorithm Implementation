#include<bits/stdc++.h>
using namespace std;

/*
vertex=5

0 2 3 5 11
2 0 4 6 9
3 4 0 5 8
5 6 5 0 7
11 9 8 7 0

*/
int selectMinVertex(int v,int weightArray[], bool setMST[])
{
    int minimum = INT_MAX;
    int vertex = -1;

    for(int i = 0; i < v; i++)
    {
        if (!setMST[i] && weightArray[i] < minimum)
        {
            minimum = weightArray[i];
            vertex = i;
        }
    }

    return vertex;
}

void findMST(int v, int graph[][100])
{
    int parentArray[v];
    int weightArray[v];
    for(int i = 0; i < v; i++)
    {
        weightArray[i] = INT_MAX;
    }
    bool setMST[v];
    for(int i = 0; i < v; i++)
    {
        setMST[i] = false;
    }

    parentArray[0] = -1;
    weightArray[0] = 0;

    for(int i = 0; i < v - 1; i++)
    {
        int u = selectMinVertex(v,weightArray, setMST);
        setMST[u] = true;
        for(int j = 0; j < v; j++)
        {
            if (graph[u][j] != 0 && !setMST[j] && graph[u][j] < weightArray[j])
            {
                weightArray[j] = graph[u][j];
                parentArray[j] = u;
            }
        }
    }

    for(int i = 1; i < v; i++)
    {
        cout << "U->V : " << parentArray[i]+1 << "->" << i+1 << ", weight = " << graph[parentArray[i]][i] << endl;
    }
}

int main()
{
    int v;
    cout << "Enter the number of vertices: " << endl;
    cin >> v;
    int graph[v][100];
    cout << "Enter the edge weights: " << endl;
    for(int i = 0; i < v; i++)
    {
        for(int j = 0; j < v; j++)
        {
            cin >> graph[i][j];
        }
    }

    findMST(v, graph);
    return 0;
}
